import { Server } from 'socket.io'

export default httpServer => {

    const io = new Server(httpServer, {
        path: '/socket',
        cors: {
            origin: '*',
            methods: ['GET', 'POST']
        }
    })

    io.on('connection', socket => {

        // room join, room id is needed
        socket.on('room join', ({roomId, username}) => {

            socket.join(roomId)
            socket.room = roomId
            socket.username = username

            socket.emit('room joined', roomId)
            socket.to(roomId).emit('user connected', socket.username)
            socket.to(socket.room).emit('get video state')

            console.log('user connected', Date.now())
            // console.log( Date.now(), io.sockets.adapter.rooms)
        })

        // change video
        socket.on('new video', data => {

            if(!socket.room) return

            socket.to(socket.room).emit('new video', data)
        })

        // seek
        socket.on('seek', time => {
            socket.to(socket.room).emit('seek', time)
        })

        // pause / unpause
        socket.on('playing', state => {
            socket.to(socket.room).emit('playing', state)
        })

        // get watchtime after new user enter
        // socket.on('get watchtime', () => {
        //     socket.to(socket.room).broadcast('get watchtime')
        // })

        socket.on('send video state', res => {
            console.log(res)
        })

        socket.on('leave', () => {
            socket.leave(socket.room)
            // console.log(Date.now(), socket.username, 'disconnected from', socket.room)
            socket.to(socket.room).emit('user disconnected', socket.username)
            socket.room = null
            socket.username = null

            console.log('user disconnected', Date.now())
        })


    })



}